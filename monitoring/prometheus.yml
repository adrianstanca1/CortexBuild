# CortexBuild Prometheus Configuration
# Monitoring and metrics collection

global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "alert_rules.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # CortexBuild Application
  - job_name: 'cortexbuild-app'
    static_configs:
      - targets: ['cortexbuild-app:3000']
    metrics_path: '/metrics'
    scrape_interval: 30s
    scrape_timeout: 10s

  # CortexBuild API
  - job_name: 'cortexbuild-api'
    static_configs:
      - targets: ['cortexbuild-app:3001']
    metrics_path: '/api/metrics'
    scrape_interval: 30s
    scrape_timeout: 10s

  # PostgreSQL Database
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres:5432']
    metrics_path: '/metrics'
    scrape_interval: 60s

  # Redis Cache
  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
    metrics_path: '/metrics'
    scrape_interval: 60s

  # Nginx Reverse Proxy
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx:8080']
    metrics_path: '/nginx_status'
    scrape_interval: 30s

  # Node Exporter (System Metrics)
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 30s

  # cAdvisor (Container Metrics)
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 30s

# Recording rules for performance optimization
recording_rules:
  - name: cortexbuild_rules
    rules:
      # API Response Time Percentiles
      - record: cortexbuild:api_response_time_p95
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job="cortexbuild-api"}[5m]))
      
      - record: cortexbuild:api_response_time_p99
        expr: histogram_quantile(0.99, rate(http_request_duration_seconds_bucket{job="cortexbuild-api"}[5m]))

      # Error Rate
      - record: cortexbuild:api_error_rate
        expr: rate(http_requests_total{job="cortexbuild-api",status=~"5.."}[5m]) / rate(http_requests_total{job="cortexbuild-api"}[5m])

      # Request Rate
      - record: cortexbuild:api_request_rate
        expr: rate(http_requests_total{job="cortexbuild-api"}[5m])

      # Database Connection Pool
      - record: cortexbuild:db_connections_active
        expr: pg_stat_activity_count{job="postgres"}

      # Memory Usage
      - record: cortexbuild:memory_usage_percent
        expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100

      # CPU Usage
      - record: cortexbuild:cpu_usage_percent
        expr: 100 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)
