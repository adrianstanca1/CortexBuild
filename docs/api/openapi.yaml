openapi: 3.0.3
info:
  title: CortexBuild API
  description: |
    Complete API reference for CortexBuild platform.

    ## Authentication
    All endpoints require Bearer token authentication unless otherwise specified.
    Include the token in the Authorization header:
    ```
    Authorization: Bearer YOUR_TOKEN_HERE
    ```

    ## Rate Limiting
    - 100 requests per minute per user
    - 1000 requests per hour per user

    ## Error Codes
    - 400: Bad Request - Invalid input
    - 401: Unauthorized - Missing or invalid token
    - 403: Forbidden - Insufficient permissions
    - 404: Not Found - Resource not found
    - 429: Too Many Requests - Rate limit exceeded
    - 500: Internal Server Error

  version: 2.0.0
  contact:
    name: CortexBuild Support
    email: support@cortexbuild.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Development server
  - url: https://api.cortexbuild.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Projects
    description: Project management
  - name: Tasks
    description: Task management
  - name: Notifications
    description: User notifications
  - name: AI
    description: AI-powered features
  - name: Marketplace
    description: App marketplace
  - name: Analytics
    description: Performance and usage analytics

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "user_123"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        role:
          type: string
          enum: [admin, developer, user]
          example: "developer"
        company_id:
          type: string
          example: "company_456"

    Project:
      type: object
      properties:
        id:
          type: string
          example: "proj_789"
        name:
          type: string
          example: "My Project"
        description:
          type: string
          example: "Project description"
        owner_id:
          type: string
          example: "user_123"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Task:
      type: object
      properties:
        id:
          type: string
          example: "task_101"
        title:
          type: string
          example: "Implement feature"
        description:
          type: string
          example: "Task description"
        status:
          type: string
          enum: [todo, in_progress, done]
          example: "in_progress"
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: "high"
        project_id:
          type: string
          example: "proj_789"
        assignee_id:
          type: string
          example: "user_123"
        due_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: string
          example: "notif_202"
        type:
          type: string
          example: "task_assigned"
        message:
          type: string
          example: "You have been assigned a new task"
        read:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request"
        message:
          type: string
          example: "The provided data is invalid"
        code:
          type: string
          example: "INVALID_INPUT"

security:
  - BearerAuth: []

paths:
  # ==================== AUTHENTICATION ====================
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                name:
                  type: string
                role:
                  type: string
                  enum: [developer, user]
      responses:
        "201":
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get authenticated user information
      responses:
        "200":
          description: User information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ==================== PROJECTS ====================
  /projects:
    get:
      tags:
        - Projects
      summary: List projects
      description: Get all projects for the authenticated user
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"

    post:
      tags:
        - Projects
      summary: Create project
      description: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "201":
          description: Project created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

  /projects/{projectId}:
    get:
      tags:
        - Projects
      summary: Get project
      description: Get a specific project by ID
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Project details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "404":
          description: Project not found

    put:
      tags:
        - Projects
      summary: Update project
      description: Update an existing project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: Project updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

    delete:
      tags:
        - Projects
      summary: Delete project
      description: Delete a project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Project deleted
        "404":
          description: Project not found

  # ==================== TASKS ====================
  /tasks:
    get:
      tags:
        - Tasks
      summary: List tasks
      description: Get tasks filtered by project or user
      parameters:
        - name: projectId
          in: query
          schema:
            type: string
        - name: userId
          in: query
          schema:
            type: string
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

    post:
      tags:
        - Tasks
      summary: Create task
      description: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - project_id
              properties:
                title:
                  type: string
                description:
                  type: string
                project_id:
                  type: string
                assignee_id:
                  type: string
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                due_date:
                  type: string
                  format: date-time
      responses:
        "201":
          description: Task created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get task
      description: Get a specific task by ID
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Task details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

    put:
      tags:
        - Tasks
      summary: Update task
      description: Update an existing task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [todo, in_progress, done]
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
      responses:
        "200":
          description: Task updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Delete a task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Task deleted

  # ==================== NOTIFICATIONS ====================
  /notifications:
    get:
      tags:
        - Notifications
      summary: List notifications
      description: Get all notifications for the authenticated user
      responses:
        "200":
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"

  /notifications/mark-read:
    post:
      tags:
        - Notifications
      summary: Mark notifications as read
      description: Mark one or more notifications as read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - notificationIds
              properties:
                notificationIds:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Notifications marked as read

  /notifications/{notificationId}:
    delete:
      tags:
        - Notifications
      summary: Delete notification
      description: Delete a specific notification
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Notification deleted
